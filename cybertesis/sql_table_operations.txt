-- Vista de tesis_full, es un join de muchas tablas que muestra casi todas las columnas de todas las tablas relacionadas a tesis
-- En esta vista se realiza la busqueda en todas las columnas cuando un usuario ingresa una palabra en el buscador
create or replace view tesis_full
as
select t.id as id, t.added_date, t.title, t.description, t.year, t.career_id, tc.name as career_name, tf.name as faculty_name, tf.place,
ti.id as institution_id, ti.name as institution_name, array_to_string(array_agg(distinct aa.name),',') AS authors, array_to_string(array_agg(distinct at.name),',') AS tutors
from tesis_tesis t
join tesis_career tc on tc.id = t.career_id
join tesis_faculty tf on tf.id = tc.faculty_id
join tesis_institution ti on ti.id = tf.institution_id
join tesis_tesis_author tta on tta.tesis_id = t.id
join tesis_person aa on tta.person_id = aa.id
join tesis_tesis_tutor ttt on ttt.tesis_id = t.id
join tesis_person at on ttt.person_id = at.id
group by t.id, t.added_date, t.title, t.description, t.year, t.career_id, tc.name, tf.name, tf.place, ti.id, ti.name
order by t.year DESC, t.added_date DESC;

-- Departamentos
-- Del 1 al 17 son departamentos. Usamos el ID 18 para la capital
CREATE TABLE tesis_py_departments(
  department_id SERIAL PRIMARY KEY,
  department_name VARCHAR(100) NOT NULL,
  department_capital VARCHAR(100) NOT NULL,
  lat FLOAT,
  lon FLOAT
);